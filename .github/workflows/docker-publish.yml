# Tên của workflow, sẽ hiển thị trong tab "Actions" của repo
name: Build and Push Docker Image to GHCR

# Cấu hình khi nào workflow sẽ chạy
on:
  # Chạy khi có push code lên branch 'main'
  push:
    branches: [ "main" ]
  # Cho phép chạy thủ công từ tab Actions
  workflow_dispatch:

# Các công việc (jobs) sẽ được thực thi
jobs:
  build-and-push-image:
    # Chạy trên một máy ảo Ubuntu mới nhất do GitHub cung cấp
    runs-on: ubuntu-latest

    # Cấp quyền cho workflow để ghi vào Packages (GHCR)
    # Đây là bước quan trọng và an toàn, không cần dùng PAT (Personal Access Token)
    permissions:
      contents: read
      packages: write

    steps:
      # Bước 1: Checkout code từ repository
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite
          coverage: none

      - name: Install Composer dependencies
        run: |
          composer install --prefer-dist --no-interaction --no-progress
          ls -la ./vendor/laravel/sail/runtimes/8.2/

      # Bước 2: Đăng nhập vào GitHub Container Registry (ghcr.io)
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          # github.repository_owner là chủ sở hữu repo (diepxuan)
          username: ${{ github.repository_owner }}
          # GITHUB_TOKEN là một token tạm thời được tạo tự động cho mỗi lần chạy workflow
          password: ${{ secrets.GITHUB_TOKEN }}

      # Bước 3: Trích xuất metadata (tags và labels) cho Docker image
      # Action này sẽ tự động tạo các tag hợp lý như 'latest', 'sha-<mã commit>'
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }} # ghcr.io/diepxuan/portal
          tags: |
            # type=semver: tự động lấy phiên bản từ git tag
            type=semver,pattern={{version}}
            # type=edge: tạo tag 'latest' khi push lên branch 'main'
            type=edge,branch=main

      # Bước 4: Build và push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          # QUAN TRỌNG: `context` là thư mục gốc của project Laravel của bạn
          # vì Dockerfile của Sail có thể tham chiếu đến các file từ thư mục gốc.
          context: ./vendor/laravel/sail/runtimes/8.2
          
          # QUAN TRỌNG: Chỉ định đường dẫn chính xác đến Dockerfile
          file: ./vendor/laravel/sail/runtimes/8.2/Dockerfile

          push: true # Đẩy image sau khi build thành công
          tags: ${{ steps.meta.outputs.tags }} # Sử dụng các tag đã tạo ở bước trên
          labels: ${{ steps.meta.outputs.labels }} # Gắn các label đã tạo ở bước trên
          
          # Dockerfile build args
          build-args: |
            WWWUSER=1000
            WWWGROUP=1000
          # QUAN TRỌNG: Thêm dòng này để build cho cả 2 kiến trúc
          # platforms: linux/amd64,linux/arm64
